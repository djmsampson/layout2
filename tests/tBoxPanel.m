classdef tBoxPanel < sharedtests.SharedContainerTests
    %TBOXPANEL Tests for uiextras.BoxPanel and uix.BoxPanel.

    properties ( TestParameter )
        % The constructor name, or class, of the component under test.
        ConstructorName = {'uiextras.BoxPanel', 'uix.BoxPanel'}
        % Name-value pair arguments to use when testing the component's
        % constructor and get/set methods.
        NameValuePairs = {{
            'BackgroundColor', [1, 1, 0], ...
            'BorderType', 'line', ...
            'CloseRequestFcn', @glttestutilities.noop, ...
            'CloseTooltipString', 'Close', ...
            'DeleteFcn', @glttestutilities.noop, ...
            'DockFcn', @glttestutilities.noop, ...
            'DockTooltipString', 'Dock', ...
            'FontAngle', 'italic', ...
            'FontName', 'Helvetica', ...
            'FontUnits', 'pixels', ...
            'FontSize', 20, ...
            'FontWeight', 'bold', ...
            'ForegroundColor', [0, 0, 1], ...
            'HelpFcn', @glttestutilities.noop, ...
            'HelpTooltipString', 'Help', ...
            'IsDocked', false, ...
            'IsMinimized', false, ...
            'MaximizeTooltipString', 'Maximize', ...
            'MinimizeFcn', @glttestutilities.noop, ...
            'MinimizeTooltipString', 'Minimize', ...
            'Padding', 5, ...
            'Units', 'pixels', ...
            'Position', [10, 10, 400, 400], ...
            'Tag', 'Test', ...
            'Title', 'uiextras.BoxPanel Test', ...
            'TitleColor', [1, 0, 0], ...
            'UndockTooltipString', 'Undock', ...
            'Visible', 'on'
            }, ...
            {
            'BackgroundColor', [1, 1, 0], ...
            'BorderType', 'line', ...
            'CloseRequestFcn', @glttestutilities.noop, ...
            'CloseTooltipString', 'Close', ...
            'DeleteFcn', @glttestutilities.noop, ...
            'Docked', false, ...
            'DockFcn', @glttestutilities.noop, ...
            'DockTooltipString', 'Dock', ...
            'FontAngle', 'italic', ...
            'FontName', 'Helvetica', ...
            'FontUnits', 'pixels', ...
            'FontSize', 20, ...
            'FontWeight', 'bold', ...
            'ForegroundColor', [0, 0, 1], ...
            'HelpFcn', @glttestutilities.noop, ...
            'HelpTooltipString', 'Help', ...
            'MaximizeTooltipString', 'Maximize', ...
            'Minimized', false, ...
            'MinimizeFcn', @glttestutilities.noop, ...
            'MinimizeTooltipString', 'Minimize', ...
            'Padding', 5, ...
            'Units', 'pixels', ...
            'Position', [10, 10, 400, 400], ...
            'Tag', 'Test', ...
            'Title', 'uix.BoxPanel Test', ...
            'TitleColor', [1, 0, 0], ...
            'UndockTooltipString', 'Undock', ...
            'Visible', 'on'
            }}
    end % properties ( TestParameter )

    properties ( Constant )
        % Box panel properties that should support both strings and
        % character arrays.
        TooltipStringProperties = {
            'MaximizeTooltipString';
            'MinimizeTooltipString';
            'UndockTooltipString';
            'DockTooltipString';
            'HelpTooltipString';
            'CloseTooltipString';
            'MaximizeTooltip';
            'MinimizeTooltip';
            'UndockTooltip';
            'DockTooltip';
            'HelpTooltip';
            'CloseTooltip'}
    end % properties ( Constant )

    methods ( Test, Sealed )

        function tPassingShadowColorToConstructorIsCorrect( ...
                testCase, ConstructorName )

            % Filter this test from R2025a onwards, since setting the 
            % 'ShadowColor' property issues a warning.
            testCase.assumeMATLABVersionIsBefore( 'R2025a' )

            % Assume that the component is not in a web figure.
            testCase.assumeGraphicsAreNotWebBased()

            % Create a component.
            expectedColor = [0, 0, 0];
            component = testCase.constructComponent( ...
                ConstructorName, 'ShadowColor', expectedColor );

            % Verify that the 'ShadowColor' property has been set
            % correctly.
            testCase.verifyEqual( component.ShadowColor, ...
                expectedColor, ...
                ['The ', ConstructorName, ' constructor has not set ', ...
                'the ''ShadowColor'' property correctly.'] )

        end % tPassingShadowColorToConstructorIsCorrect

        function tGettingAndSettingShadowColorWorksCorrectly( ...
                testCase, ConstructorName )

            % Filter this test from R2025a onwards, since setting the 
            % 'ShadowColor' property issues a warning.
            testCase.assumeMATLABVersionIsBefore( 'R2025a' )

            % Assume that the component is not in a web figure.
            testCase.assumeGraphicsAreNotWebBased()

            % Create a component.
            component = testCase.constructComponent( ConstructorName );

            % Set the 'ShadowColor' property.
            expectedColor = [0, 0, 0];
            component.ShadowColor = expectedColor;

            % Verify that the value has been stored correctly.
            testCase.verifyEqual( component.ShadowColor, ...
                expectedColor, ...
                ['The ', ConstructorName, ' component has not ', ...
                'assigned the ''ShadowColor'' property correctly ', ...
                'when this property was set.'] )

        end % tGettingAndSettingShadowColorWorksCorrectly

        function tSettingEmptyMinimizeFcnIsWarningFree( ...
                testCase, ConstructorName )

            % Create a component.
            component = testCase.constructComponent( ConstructorName );

            % Verify that setting the 'MinimizeFcn' to an empty value is
            % warning-free.
            setter = @() set( component, 'MinimizeFcn', [] );
            testCase.verifyWarningFree( setter, ...
                ['Setting the ''MinimizeFcn'' property of the ', ...
                ConstructorName, ' component was not warning-free.'] )

        end % tSettingEmptyMinimizeFcnIsWarningFree

        function tSettingEmptyTitleAssignsCorrectValue( ...
                testCase, ConstructorName )

            % Create a component.
            component = testCase.constructComponent( ConstructorName );

            % Set the 'Title' property.
            expectedTitle = '';
            component.Title = expectedTitle;

            % Verify that it has been assigned correctly.
            testCase.verifyEqual( component.Title, expectedTitle, ...
                ['Setting an empty value for the ''Title'' property ', ...
                'of the ', ConstructorName, ' component did not ', ...
                'store the correct value.'] )

        end % tSettingEmptyTitleAssignsCorrectValue

        function tTooltipStringPropertiesSupportStrings( ...
                testCase, ConstructorName )

            % This test is only valid for MATLAB R2017a onwards.
            testCase.assumeMATLABVersionIsAtLeast( 'R2017a' )

            % Create a component.
            component = testCase.constructComponent( ConstructorName );

            % Create a string (in a way that won't cause errors in earlier
            % versions). Note that double quotes are not accepted in code 
            % files in R2016b and earlier.
            testString = string( 'Test' ); %#ok<STRQUOT>

            % For each tooltip string property, verify that it supports
            % setting a string value (storing it as a character array).
            expectedValue = char( testString );
            tooltipStringProperties = testCase.TooltipStringProperties;
            for k = 1 : numel( tooltipStringProperties )
                propertyName = tooltipStringProperties{k};
                component.(propertyName) = testString;
                testCase.verifyEqual( component.(propertyName), ...
                    expectedValue, ['Setting the ''', propertyName, ...
                    ''' property with a string value on the ', ...
                    ConstructorName, ' component did not assign the ', ...
                    'value correctly.'] )
            end % for

        end % tTooltipStringPropertiesSupportStrings

        function tTooltipStringPropertiesErrorForNonScalarStrings( ...
                testCase, ConstructorName )

            % This test is only valid for MATLAB R2017a onwards.
            testCase.assumeMATLABVersionIsAtLeast( 'R2017a' )

            % Create a component.
            component = testCase.constructComponent( ConstructorName );

            % Create a non-scalar string.
            testString = string( {'A', 'B'} ); %#ok<STRCLQT>

            % For each tooltip string property, verify that setting a
            % non-scalar value causes an error.
            tooltipStringProperties = testCase.TooltipStringProperties;
            for k = 1 : numel( tooltipStringProperties )
                propertyName = tooltipStringProperties{k};
                f = @() set( component, propertyName, testString );
                testCase.verifyError( f, 'uix:InvalidPropertyValue', ...
                    ['Setting the ''', propertyName, ...
                    ''' property with a non-scalar string value on ', ...
                    'the ', ConstructorName, ' component did not ', ...
                    'cause the value correctly.'] )
            end % for

        end % tTooltipStringPropertiesErrorForNonScalarStrings

        function tSettingMinimizedPropertyErrorsForIncorrectValues( ...
                testCase, ConstructorName )

            % Construct the component.
            component = testCase.constructComponent( ConstructorName );

            % Verify that a non-logical value causes an error.
            f = @() set( component, 'Minimized', {} );
            diagnostic = @( adjective ) ['Setting a ', adjective, ...
                ' value for the ''Minimized'' property of the ', ...
                ConstructorName, ' component did not throw an error.'];
            testCase.verifyError( f, 'uix:InvalidPropertyValue', ...
                diagnostic( 'non-logical' ) )

            % Verify that a non-scalar value causes an error.
            f = @() set( component, 'Minimized', true( 1, 2 ) );
            testCase.verifyError( f, 'uix:InvalidPropertyValue', ...
                diagnostic( 'non-scalar' ) )

        end % tSettingMinimizedPropertyErrorsForIncorrectValues

        function tMinimizingBoxPanelIsWarningFree( testCase, ...
                ConstructorName )

            % Construct the component.
            component = testCase.constructComponent( ConstructorName );

            % Minimize the box panel and verify that this operation is
            % warning-free.
            f = @() set( component, 'Minimized', true );
            testCase.verifyWarningFree( f, ['Minimizing the ', ...
                ConstructorName, ' component was not warning-free.'] )
            
        end % tMinimizingBoxPanelIsWarningFree

         function tTitleColorIsLightBlueBeforeR2025a( testCase, ...
                ConstructorName )

            % Filter this test from R2025a onwards.
            testCase.assumeMATLABVersionIsBefore( 'R2025a' )

            % Construct the component.
            component = testCase.constructComponent( ConstructorName );

            % Verify that the 'TitleColor' property is light mode 
            % "chat bubble" (a light blue).
            lightModeChatBubble = [0.8706, 0.9373, 1];
            args = {component.TitleColor, ...
                lightModeChatBubble, 'AbsTol', 1e-4, ...
                ['The ''TitleColor'' property ', ...
                'of the ', ConstructorName, ' component was not ', ...
                'the default light blue after construction.']};

            % The calling syntax for verifyEqual changed in R2021b.
            if verLessThan( 'matlab', '9.11' ) %#ok<VERLESSMATLAB> % R2021b
                testCase.verifyEqual( args{:} )
            else
                testCase.verifyEqual( args{[1:2, 5, 3:4]} )
            end % if

        end % tTitleColorIsLightBlueBeforeR2025a

    end % methods ( Test, Sealed )

end % classdef